import requests
import csv
import logging
import time
import os
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
log_file = f"gosagro_parser_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_file, encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("gosagro_parser")

# === API –ù–ê–°–¢–†–û–ô–ö–ò ===
BASE_URL = "https://gosagro.kz/restapi/query/get"
API_PARAMS = {
    "code": "report$its_req_public",
    "preparam1": "",
    "preparam2": "",
    "preparam3": "",
    "preparam4": "2023-01-01 00:00:00",
    "preparam5": datetime.now().strftime("%Y-%m-%d 23:59:59")
}
PER_PAGE = 500  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
SAVE_FILE = "gosagro_reestr.csv"  # –§–∞–π–ª CSV
CHECKPOINT_FILE = "CheckReestr.txt"  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

# === –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ===
seen_docnums = set()  # –•—Ä–∞–Ω–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ docnum


# === –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–†–û–°–ê –î–ê–ù–ù–´–• ===
def fetch_data(page):
    params = API_PARAMS.copy()
    params["page"] = page
    params["perpage"] = PER_PAGE

    try:
        logger.info(f"üì° –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}...")
        response = requests.get(BASE_URL, params=params, timeout=20)
        response.raise_for_status()
        data = response.json()

        if "items" in data and isinstance(data["items"], list) and len(data["items"]) > 0:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ `docnum`
            unique_data = [item for item in data["items"] if item["docnum"] not in seen_docnums]
            for item in unique_data:
                seen_docnums.add(item["docnum"])

            logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –í—Å–µ–≥–æ: {len(data['items'])}, –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(unique_data)}.")
            return unique_data
        else:
            logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
            return []

    except requests.exceptions.Timeout:
        logger.error(f"‚è≥ –¢–∞–π–º-–∞—É—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫...")
        time.sleep(10)
        return fetch_data(page)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
        return []


# === –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–ì–†–ï–°–°–ê ===
def get_last_page():
    """–ß–∏—Ç–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ CheckList.txt"""
    if os.path.exists(CHECKPOINT_FILE):
        with open(CHECKPOINT_FILE, "r") as f:
            try:
                return int(f.read().strip())
            except ValueError:
                return 1
    return 1


def save_checkpoint(page):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    with open(CHECKPOINT_FILE, "w") as f:
        f.write(str(page))


# === –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° –ü–ê–†–°–ò–ù–ì–ê ===
def run_parser():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ Gosagro")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—á–∏–Ω–∞—Ç—å
    start_page = get_last_page()
    logger.info(f"‚è© –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å {start_page}-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º CSV –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (append)
    with open(SAVE_FILE, "a", newline="", encoding="utf-8") as csvfile:
        writer = None
        buffered_write = []  # –ë—É—Ñ–µ—Ä –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
        page = start_page

        while True:
            try:
                data = fetch_data(page)
                if not data:
                    break  # –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥

                # –ï—Å–ª–∏ writer –Ω–µ —Å–æ–∑–¥–∞–Ω ‚Äì —Å–æ–∑–¥–∞–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                if writer is None:
                    fieldnames = data[0].keys()
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    if start_page == 1 and os.stat(SAVE_FILE).st_size == 0:
                        writer.writeheader()

                # –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
                buffered_write.extend(data)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV –∫–∞–∂–¥—ã–µ 5000 –∑–∞–ø–∏—Å–µ–π (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –¥–∏—Å–∫)
                if len(buffered_write) >= 5000:
                    writer.writerows(buffered_write)
                    csvfile.flush()  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã
                    logger.info(f"üíæ –ó–∞–ø–∏—Å–∞–Ω–æ {len(buffered_write)} –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª.")
                    buffered_write = []  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç
                save_checkpoint(page)

                page += 1  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
                time.sleep(5)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
        if buffered_write:
            writer.writerows(buffered_write)
            csvfile.flush()
            logger.info(f"üìå –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(buffered_write)} –∑–∞–ø–∏—Å–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    logger.info(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {SAVE_FILE}.")


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    run_parser()
