import requests
import csv
import logging
import argparse
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (UTF-8)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(f"gosagro_parser_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("gosagro_parser")


class GosagroParser:
    def __init__(self, api_url="https://gosagro.kz/restapi/query/get"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.api_url = api_url
        self.headers = {
            "User-Agent": "Mozilla/5.0",
            "Accept": "application/json",
            "Referer": "https://gosagro.kz/",
            "Connection": "keep-alive"
        }

    def fetch_data(self, params):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
        """
        try:
            logger.info(f" –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {self.api_url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
            response = requests.get(self.api_url, headers=self.headers, params=params)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP

            data = response.json()
            logger.info(f" –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data.keys()}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–ª—é—á–∞ 'items', –∞ –Ω–µ 'data'
            if "items" in data and isinstance(data["items"], list):
                logger.info(f" API –≤–µ—Ä–Ω—É–ª {len(data['items'])} –∑–∞–ø–∏—Å–µ–π.")
                return data["items"]
            else:
                logger.warning("‚ö†Ô∏è API –æ—Ç–≤–µ—Ç–∏–ª 200 OK, –Ω–æ —Å–ø–∏—Å–æ–∫ `items` –ø—É—Å—Ç.")
                return []
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return []

    def save_to_csv(self, data, csv_path):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        if not data:
            logger.warning("–°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç. CSV –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.")
            return

        fieldnames = data[0].keys()
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(data)} –∑–∞–ø–∏—Å–µ–π –≤ {csv_path}")

        with open(csv_path, "w", newline="", encoding="utf-8") as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(data)

        logger.info(f" –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {csv_path}")

    def fetch_all_reports(self, start_date, end_date):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"""
        all_data = []
        page = 1

        while True:
            params = {
                "code": "report$its_req_wait",
                "preparam1": "",
                "preparam2": "",
                "preparam3": start_date,
                "preparam4": end_date,
                "page": page,
                "perpage": 200
            }

            data = self.fetch_data(params)
            if data:
                all_data.extend(data)
                page += 1
            else:
                break

            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_data)} –∑–∞–ø–∏—Å–µ–π –Ω–∞ {page-1} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö.")
            time.sleep(1)

        return all_data

    def run(self, csv_path):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ Gosagro")
        start_date = "2023-01-01 00:00:00"
        end_date = datetime.now().strftime("%Y-%m-%d 23:59:59")

        reports_data = self.fetch_all_reports(start_date, end_date)
        self.save_to_csv(reports_data, csv_path)

        logger.info("‚úÖ –ü–∞—Ä—Å–µ—Ä Gosagro —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ü–∞—Ä—Å–µ—Ä API Gosagro")
    parser.add_argument("--output", help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ CSV", required=False)
    args = parser.parse_args()

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    csv_filename = args.output if args.output else f"gosagro_reports_{timestamp}.csv"

    logger.info(f"üìÅ –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {csv_filename}")

    parser = GosagroParser()
    parser.run(csv_filename)
